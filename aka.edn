{:aka
 {:taps
  {:aka/tap
   {:description "Obtain alias definitions.",
    :usage
    ["Usage: "
     "  aka tap [options] prefix tap-file"
     "  clj -A:aka/tap prefix [options] tap-file"
     ""
     "Options:"
     "  -o <deps.edn> Add the aliases to the deps.edn"
     ""
     "Aliases will be namespaced with <prefix>."
     "The <tap-file> is a URL or file containing alias definitions."],
    :main-opts ["-m" "aka.main" "-A:aka/tap"],
    :extra-deps
    {aka
     {:git/url "https://github.com/matthias-margush/aka",
      :sha "f41a582dbeb7d432f816e083fe1d16595e17c02a"}}},
   :aka/read
   {:description "Read and print the definition of an alias.",
    :usage
    ["Usage: " "  aka read alias-name" "  clj -A:aka/read alias-name"],
    :main-opts ["-m" "aka.main" "-A:aka/read"],
    :extra-deps
    {aka
     {:git/url "https://github.com/matthias-margush/aka",
      :sha "f41a582dbeb7d432f816e083fe1d16595e17c02a"}}},
   :aka/describe
   {:description "Print alias documentation.",
    :usage
    ["Usage: "
     "  aka describe [alias]"
     "  clj -A:aka/describe [alias]"
     ""
     "Examples:"
     "  clj -A:aka/describe             # Lists all available aliases"
     "  clj -A:aka/describe :prefix/    # Lists aliases with the namespace of :prefix"
     "  clj -A:aka/describe :prefix/foo # Full description of alias :prefix/foo"],
    :main-opts ["-m" "aka.main" "-A:aka/describe"],
    :extra-deps
    {aka
     {:git/url "https://github.com/matthias-margush/aka",
      :sha "f41a582dbeb7d432f816e083fe1d16595e17c02a"}}},
   :pack/aws-lambda
   {:description "Generates a zip which can be uploaded to AWS.",
    :usage
    ["Usage: clj -A:pack/aws-lambda [options] <path/to/output.zip>"
     ""
     "Options:"
     "  -A ALIASES               Concatenated aliases of any kind, ex: -A:dev:mem"
     "  -R ALIASES               Concatenated resolve-deps aliases, ex: -R:bench:1.9"
     "  -C ALIASES               Concatenated make-classpath aliases, ex: -C:dev"
     "  -e, --extra-path STRING  Add directory to classpath for building. Same as :extra-paths"
     "  -h, --help               show this help"
     ""
     "output.zip is where to put the output zip. Leading directories will be created."],
    :main-opts ["-m" "mach.pack.alpha.aws-lambda"],
    :extra-deps
    #:pack{pack.alpha
           {:git/url "git@github.com:juxt/pack.alpha.git",
            :sha "d9023b24c3d589ba6ebc66c5a25c0826ed28ead5"}}},
   :pack/uberjar
   {:description
    "Builds an Uberjar using Parallel Universeâ€™s Capsule.",
    :usage
    ["Usage: clj -A:pack/uberjar [options] <path/to/output.jar>"
     ""
     "Options:"
     "  -m, --main SYMBOL                           main namespace"
     "      --application-id STRING                 globally unique name for application, used for caching"
     "      --application-version STRING            unique version for this uberjar, used for caching"
     "      --system-properties STRING              space-separated list of propName=value pairs, specifying JVM System Properties which will be passed to the application. Maps to the 'System-Properties' entry in the Capsule Manifest."
     "      --jvm-args STRING                       space-separated list of JVM argument that will be used to launch the application (e.g "
     -server
     -Xms200m
     -Xmx600m
     "). Maps to the 'JVM-Args' entry in the Capsule Manifest."
     "  -e, --extra-path STRING                     add directory to classpath for building"
     "  -d, --deps STRING                 deps.edn  deps.edn file location"
     "  -M, --manifest-entry STRING                 a \"Key: Value\" pair that will be appended to the Capsule Manifest; useful for conveying arbitrary Manifest entries to the Capsule Manifest. Can be repeated to supply several entries."
     "  -h, --help                                  show this help"
     ""
     "output.jar is where to put the output uberjar. Leading directories will be created."],
    :main-opts ["-m" "mach.pack.alpha.capsule"],
    :extra-deps
    #:pack{pack.alpha
           {:git/url "git@github.com:juxt/pack.alpha.git",
            :sha "d9023b24c3d589ba6ebc66c5a25c0826ed28ead5"}}},
   :pack/onejar
   {:description "A OneJAR builder.",
    :usage
    ["Usage: clj -A:pack/one-jar [options] <path/to/output.jar>"
     ""
     "Options:"
     "  -e, --extra-path STRING                add directory to classpath for building"
     "  -d, --deps STRING        deps.edn      deps.edn file location"
     "  -m, --main STRING        clojure.main  Override the default main of clojure.main. You MUST use AOT compilation with this."
     "  -h, --help                             show this help"
     ""
     "output.jar is where to put the output uberjar. Leading directories will be created."],
    :main-opts ["-m" "mach.pack.alpha.one-jar"],
    :extra-deps
    #:pack{pack.alpha
           {:git/url "git@github.com:juxt/pack.alpha.git",
            :sha "d9023b24c3d589ba6ebc66c5a25c0826ed28ead5"}}},
   :pack/skinny
   {:description "Generates a skinny jar.",
    :main-opts ["-m" "mach.pack.alpha.skinny"],
    :extra-deps
    #:pack{pack.alpha
           {:git/url "git@github.com:juxt/pack.alpha.git",
            :sha "d9023b24c3d589ba6ebc66c5a25c0826ed28ead5"}}}}}}
