{:aka
 {:taps
  {:sc/rebl-8
   {:extra-deps
    {org.clojure/core.async #:mvn{:version "0.6.532"},
     org.clojure/data.csv #:mvn{:version "0.1.4"},
     org.clojure/data.json #:mvn{:version "0.2.7"},
     org.yaml/snakeyaml #:mvn{:version "1.25"},
     com.cognitect/rebl
     #:local{:root "/Developer/REBL/latest/REBL.jar"}},
    :main-opts
    ["-e"
     "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"
     "-m"
     "cognitect.rebl"]},
   :sc/proto {:extra-deps {proto-repl #:mvn{:version "RELEASE"}}},
   :sc/nrepl
   {:extra-deps {nrepl #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "nrepl.cmdline"]},
   :sc/1.2
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.2.1"}}},
   :sc/prepl
   {:jvm-opts
    ["-Dclojure.server.repl={:port,40404,:accept,clojure.core.server/io-prepl}"]},
   :sc/closh
   {:extra-deps
    {closh
     {:git/url "https://github.com/dundalek/closh.git",
      :tag "v0.5.0",
      :sha "6a7c0aa293616e2d28f7f735e915a301e44d2121"}},
    :main-opts ["-m" "closh.zero.frontend.rebel"]},
   :sc/1.6
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.6.0"}}},
   :sc/1.5
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.5.1"}}},
   :sc/graph
   {:deps #:org.clojure{tools.deps.graph #:mvn{:version "0.2.24"}},
    :main-opts ["-m" "clojure.tools.deps.graph"]},
   :sc/readme
   {:extra-deps #:seancorfield{readme #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "seancorfield.readme"]},
   :sc/runner
   {:extra-deps
    #:com.cognitect{test-runner
                    {:git/url
                     "https://github.com/cognitect-labs/test-runner",
                     :sha "3cb0a9daf1cb746259dc8309b218f9211ad3b33b"}},
    :main-opts
    ["-m"
     "cognitect.test-runner"
     "-d"
     "test"
     "-d"
     "src/test/clojure"]},
   :sc/1.7
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.7.0"}}},
   :sc/master
   {:override-deps
    #:org.clojure{clojure #:mvn{:version "1.11.0-master-SNAPSHOT"}}},
   :sc/rebl-11-win
   {:extra-deps
    {org.clojure/data.json #:mvn{:version "0.2.7"},
     org.openjfx/javafx-media #:mvn{:version "11.0.2"},
     org.openjfx/javafx-swing #:mvn{:version "11.0.2"},
     org.openjfx/javafx-controls #:mvn{:version "11.0.2"},
     org.yaml/snakeyaml #:mvn{:version "1.25"},
     org.openjfx/javafx-graphics #:mvn{:version "11.0.2"},
     com.cognitect/rebl
     #:local{:root "C:\\Developer\\REBL\\latest\\REBL.jar"},
     org.clojure/data.csv #:mvn{:version "0.1.4"},
     org.openjfx/javafx-base #:mvn{:version "11.0.2"},
     org.openjfx/javafx-web #:mvn{:version "11.0.2"},
     org.openjfx/javafx-fxml #:mvn{:version "11.0.2"},
     org.clojure/core.async #:mvn{:version "0.6.532"}},
    :main-opts
    ["-e"
     "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"
     "-m"
     "cognitect.rebl"]},
   :pack/uberjar
   {:description
    "Builds an Uberjar using Parallel Universeâ€™s Capsule.",
    :usage
    ["Usage: clj -A:pack/uberjar [options] <path/to/output.jar>"
     ""
     "Options:"
     "  -m, --main SYMBOL                           main namespace"
     "      --application-id STRING                 globally unique name for application, used for caching"
     "      --application-version STRING            unique version for this uberjar, used for caching"
     "      --system-properties STRING              space-separated list of propName=value pairs, specifying JVM System Properties which will be passed to the application. Maps to the 'System-Properties' entry in the Capsule Manifest."
     "      --jvm-args STRING                       space-separated list of JVM argument that will be used to launch the application (e.g "
     -server
     -Xms200m
     -Xmx600m
     "). Maps to the 'JVM-Args' entry in the Capsule Manifest."
     "  -e, --extra-path STRING                     add directory to classpath for building"
     "  -d, --deps STRING                 deps.edn  deps.edn file location"
     "  -M, --manifest-entry STRING                 a \"Key: Value\" pair that will be appended to the Capsule Manifest; useful for conveying arbitrary Manifest entries to the Capsule Manifest. Can be repeated to supply several entries."
     "  -h, --help                                  show this help"
     ""
     "output.jar is where to put the output uberjar. Leading directories will be created."],
    :main-opts ["-m" "mach.pack.alpha.capsule"],
    :extra-deps
    #:pack{pack.alpha
           {:git/url "git@github.com:juxt/pack.alpha.git",
            :sha "d9023b24c3d589ba6ebc66c5a25c0826ed28ead5"}}},
   :sc/1.10.1
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.10.1"}}},
   :sc/1.9
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.9.0"}}},
   :pack/aws-lambda
   {:description "Generates a zip which can be uploaded to AWS.",
    :usage
    ["Usage: clj -A:pack/aws-lambda [options] <path/to/output.zip>"
     ""
     "Options:"
     "  -A ALIASES               Concatenated aliases of any kind, ex: -A:dev:mem"
     "  -R ALIASES               Concatenated resolve-deps aliases, ex: -R:bench:1.9"
     "  -C ALIASES               Concatenated make-classpath aliases, ex: -C:dev"
     "  -e, --extra-path STRING  Add directory to classpath for building. Same as :extra-paths"
     "  -h, --help               show this help"
     ""
     "output.zip is where to put the output zip. Leading directories will be created."],
    :main-opts ["-m" "mach.pack.alpha.aws-lambda"],
    :extra-deps
    #:pack{pack.alpha
           {:git/url "git@github.com:juxt/pack.alpha.git",
            :sha "d9023b24c3d589ba6ebc66c5a25c0826ed28ead5"}}},
   :sc/deploy
   {:extra-deps {deps-deploy #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "deps-deploy.deps-deploy" "deploy"]},
   :sc/socket-zero
   {:jvm-opts
    ["-Dclojure.server.repl={:port,0,:accept,clojure.core.server/repl}"],
    :main-opts
    ["-e"
     "(.getLocalPort,(get-in,@#'clojure.core.server/servers,[\"repl\",:socket]))"]},
   :sc/test
   {:extra-paths ["test" "src/test/clojure"],
    :extra-deps #:org.clojure{test.check #:mvn{:version "RELEASE"}}},
   :sc/1.0
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.0.0"}}},
   :sc/reflect
   {:extra-deps
    #:com.stuarthalloway{reflector
                         {:git/url
                          "https://github.com/stuarthalloway/reflector",
                          :sha
                          "93a0c19b4526c1180959e940202928d35e5c3cef"}}},
   :sc/old
   {:extra-deps #:org.clojure{tools.nrepl #:mvn{:version "RELEASE"}},
    :main-opts
    ["-e"
     "(require,'[clojure.tools.nrepl.server,:refer,[start-server]]),(start-server,:port,60606)"]},
   :sc/comp {:extra-deps {compliment #:mvn{:version "RELEASE"}}},
   :sc/decompile
   {:extra-deps
    #:com.clojure-goes-fast{clj-java-decompiler
                            #:mvn{:version "RELEASE"}}},
   :pack/skinny
   {:description "Generates a skinny jar.",
    :main-opts ["-m" "mach.pack.alpha.skinny"],
    :extra-deps
    #:pack{pack.alpha
           {:git/url "git@github.com:juxt/pack.alpha.git",
            :sha "d9023b24c3d589ba6ebc66c5a25c0826ed28ead5"}}},
   :sc/deps
   {:extra-deps
    #:org.clojure{tools.deps.alpha
                  {:git/url
                   "https://github.com/clojure/tools.deps.alpha",
                   :sha "19d197ab221d37db750423eb970880cb87a91100"}},
    :main-opts
    ["-e"
     "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"]},
   :aka/describe
   {:description "Print alias documentation.",
    :usage
    ["Usage: "
     "  aka describe [alias]"
     "  clj -A:aka/describe [alias]"
     ""
     "Examples:"
     "  clj -A:aka/describe             # Lists all available aliases"
     "  clj -A:aka/describe :prefix/    # Lists aliases with the namespace of :prefix"
     "  clj -A:aka/describe :prefix/foo # Full description of alias :prefix/foo"],
    :main-opts ["-m" "aka.main" "-A:aka/describe"],
    :extra-deps
    {aka
     {:git/url "https://github.com/matthias-margush/aka",
      :sha "f41a582dbeb7d432f816e083fe1d16595e17c02a"}}},
   :aka/tap
   {:description "Obtain alias definitions.",
    :usage
    ["Usage: "
     "  aka tap [options] prefix tap-file"
     "  clj -A:aka/tap prefix [options] tap-file"
     ""
     "Options:"
     "  -o <deps.edn> Add the aliases to the deps.edn"
     ""
     "Aliases will be namespaced with <prefix>."
     "The <tap-file> is a URL or file containing alias definitions."],
    :main-opts ["-m" "aka.main" "-A:aka/tap"],
    :extra-deps
    {aka
     {:git/url "https://github.com/matthias-margush/aka",
      :sha "f41a582dbeb7d432f816e083fe1d16595e17c02a"}}},
   :sc/rebl-11
   {:extra-deps
    {org.clojure/data.json #:mvn{:version "0.2.7"},
     org.openjfx/javafx-media #:mvn{:version "11.0.2"},
     org.openjfx/javafx-swing #:mvn{:version "11.0.2"},
     org.openjfx/javafx-controls #:mvn{:version "11.0.2"},
     org.yaml/snakeyaml #:mvn{:version "1.25"},
     org.openjfx/javafx-graphics #:mvn{:version "11.0.2"},
     com.cognitect/rebl
     #:local{:root "/Developer/REBL/latest/REBL.jar"},
     org.clojure/data.csv #:mvn{:version "0.1.4"},
     org.openjfx/javafx-base #:mvn{:version "11.0.2"},
     org.openjfx/javafx-web #:mvn{:version "11.0.2"},
     org.openjfx/javafx-fxml #:mvn{:version "11.0.2"},
     org.clojure/core.async #:mvn{:version "0.6.532"}},
    :main-opts
    ["-e"
     "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"
     "-m"
     "cognitect.rebl"]},
   :sc/1.4
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.4.0"}}},
   :pack/onejar
   {:description "A OneJAR builder.",
    :usage
    ["Usage: clj -A:pack/one-jar [options] <path/to/output.jar>"
     ""
     "Options:"
     "  -e, --extra-path STRING                add directory to classpath for building"
     "  -d, --deps STRING        deps.edn      deps.edn file location"
     "  -m, --main STRING        clojure.main  Override the default main of clojure.main. You MUST use AOT compilation with this."
     "  -h, --help                             show this help"
     ""
     "output.jar is where to put the output uberjar. Leading directories will be created."],
    :main-opts ["-m" "mach.pack.alpha.one-jar"],
    :extra-deps
    #:pack{pack.alpha
           {:git/url "git@github.com:juxt/pack.alpha.git",
            :sha "d9023b24c3d589ba6ebc66c5a25c0826ed28ead5"}}},
   :sc/install
   {:extra-deps {deps-deploy #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "deps-deploy.deps-deploy" "install"]},
   :sc/spec2
   {:extra-deps
    #:org.clojure{spec-alpha2
                  {:git/url "https://github.com/clojure/spec-alpha2",
                   :sha "b644e4d8c5553e10544d920306690fffe9b53e15"}}},
   :sc/jar
   {:extra-deps #:seancorfield{depstar #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "hf.depstar.jar"]},
   :sc/outdated
   {:extra-deps #:olical{depot #:mvn{:version "1.8.4"}},
    :main-opts ["-m" "depot.outdated.main"]},
   :sc/eastwood
   {:extra-deps #:jonase{eastwood #:mvn{:version "RELEASE"}},
    :main-opts
    ["-m"
     "eastwood.lint"
     "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]},
   :sc/1.3
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.3.0"}}},
   :sc/socket
   {:jvm-opts
    ["-Dclojure.server.repl={:port,50505,:accept,clojure.core.server/repl}"]},
   :sc/new
   {:extra-deps #:seancorfield{clj-new #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "clj-new.create"]},
   :sc/expect
   {:extra-deps
    {expectations #:mvn{:version "RELEASE"},
     expectations/clojure-test #:mvn{:version "RELEASE"}}},
   :sc/rebl-8-win
   {:extra-deps
    {org.clojure/core.async #:mvn{:version "0.6.532"},
     org.clojure/data.csv #:mvn{:version "0.1.4"},
     org.clojure/data.json #:mvn{:version "0.2.7"},
     org.yaml/snakeyaml #:mvn{:version "1.25"},
     com.cognitect/rebl
     #:local{:root "C:\\Developer\\REBL\\latest\\REBL.jar"}},
    :main-opts
    ["-e"
     "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"
     "-m"
     "cognitect.rebl"]},
   :sc/bench {:extra-deps {criterium #:mvn{:version "RELEASE"}}},
   :sc/liquid
   {:extra-deps #:mogenslund{liquid #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "liq.core"]},
   :sc/pne
   {:main-opts
    ["-e"
     "(defmacro,$,[&,body],(list,'while,(list,'when-let,'[$_,(read-line)],(let,[v,(gensym)],(list,'let,(vector,v,(list*,'do,body)),(list,'println,v))),'$_)))"]},
   :sc/1.8
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.8.0"}}},
   :sc/1.10
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.10.0"}}},
   :sc/1.1
   {:override-deps #:org.clojure{clojure #:mvn{:version "1.1.0"}}},
   :sc/rebel
   {:extra-deps
    #:com.bhauman{rebel-readline #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "rebel-readline.main"]},
   :sc/measure
   {:extra-deps
    #:com.clojure-goes-fast{clj-memory-meter
                            #:mvn{:version "RELEASE"}}},
   :sc/uberjar
   {:extra-deps #:seancorfield{depstar #:mvn{:version "RELEASE"}},
    :main-opts ["-m" "hf.depstar.uberjar"]},
   :aka/read
   {:description "Read and print the definition of an alias.",
    :usage
    ["Usage: " "  aka read alias-name" "  clj -A:aka/read alias-name"],
    :main-opts ["-m" "aka.main" "-A:aka/read"],
    :extra-deps
    {aka
     {:git/url "https://github.com/matthias-margush/aka",
      :sha "f41a582dbeb7d432f816e083fe1d16595e17c02a"}}}}}}
